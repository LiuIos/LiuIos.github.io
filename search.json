[{"title":"搞懂DNS","date":"2022-02-16T07:55:35.000Z","url":"/2022/02/16/%E6%90%9E%E6%87%82DNS/","tags":[["网络","/tags/%E7%BD%91%E7%BB%9C/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":"什么是DNSDNS 即域名系统，全称是 Domain Name System。当我们在浏览器输入一个 URL 地址时，浏览器要向这个 URL 的主机名对应的服务器发送请求，就得知道服务器的 IP，对于浏览器来说，DNS 的作用就是将主机名转换成 IP 地址。下面是摘自《计算机网络：自顶向下方法》的概念： DNS 是： 一个由分层的 DNS 服务器实现的分布式数据库 一个使得主机能够查询分布式数据库的应用层协议 也就是，DNS 是一个应用层协议，我们发送一个请求，其中包含我们要查询的主机名，它就会给我们返回这个主机名对应的 IP； 其次，DNS是一个分布式数据库，整个DNS系统由分散在世界各地的很多台DNS服务器组成，每台DNS服务器上都保存了一些数据，这些数据可以让我们最终查到主机名对应的IP。 所以 DNS 的查询过程，说白了，就是去向这些 DNS 服务器询问，你知道这个主机名的 IP 是多少吗，不知道？那你知道去哪台 DNS 服务器上可以查到吗？直到查到我想要的 IP 为止。 分布式、层次数据库什么是分布式？这个世界上没有一台 DNS 服务器拥有因特网上所有主机的映射，每台 DNS 只负责部分映射。 什么是层次？DNS 服务器有 3 种类型：根 DNS 服务器、顶级域（Top-Level Domain, TLD）DNS 服务器和权威 DNS 服务器。它们的层次结构如下图所示： 图片来源：《计算机网络：自顶向下方法》 根 DNS 服务器 首先我们要明确根域名是什么，比如 www.baidu.com，有些同学可能会误以为 com 就是根域名，其实 com 是顶级域名，www.baidu.com 的完整写法是 www.baidu.com.，最后的这个 . 就是根域名。 根 DNS 服务器的作用是什么呢？就是管理它的下一级，也就是顶级域 DNS 服务器。通过询问根 DNS 服务器，我们可以知道一个主机名对应的顶级域 DNS 服务器的 IP 是多少，从而继续向顶级域 DNS 服务器发起查询请求。 顶级域 DNS 服务器 除了前面提到的 com 是顶级域名，常见的顶级域名还有 cn、org、edu 等。顶级域 DNS 服务器，也就是 TLD，提供了它的下一级，也就是权威 DNS 服务器的 IP 地址。 权威 DNS 服务器 权威 DNS 服务器可以返回主机 - IP 的最终映射。 关于这几个层次的服务器之间是怎么交互的，接下来我们会讲到 DNS 具体的查询过程，结合查询过程，大家就不难理解它们之间的关系了。 本地DNS服务器之前对 DNS 有过了解的同学可能会发现，上一节的 DNS 层次结构，为什么没有提到本地 DNS 服务器？因为严格来说，本地 DNS 服务器并不属于 DNS 的层次结构，但它对 DNS 层次结构是至关重要的。那什么是本地 DNS 服务器呢？ 每个 ISP 都有一台本地 DNS 服务器，比如一个居民区的 ISP、一个大学的 ISP、一个机构的 ISP，都有一台或多台本地 DNS 服务器。当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，本地 DNS 服务器起着代理的作用，并负责将该请求转发到 DNS 服务器层次结构中。 接下来就让我们通过一个简单的例子，看看 DNS 的查询过程是怎样的，看看客户端、本地 DNS 服务器、DNS 服务器层次结构之间是如何交互的。 递归查询、迭代查询如下图，假设主机 m.n.com 想要获取主机 a.b.com 的 IP 地址，会经过以下几个步骤： 首先，主机 m.n.com 向它的本地 DNS 服务器发送一个 DNS 查询报文，其中包含期待被转换的主机名 a.b.com； 本地 DNS 服务器将该报文转发到根 DNS 服务器； 该根 DNS 服务器注意到 com 前缀，便向本地 DNS 服务器返回 com 对应的顶级域 DNS 服务器（TLD）的 IP 地址列表。 ​ 意思就是，我不知道 a.b.com 的 IP，不过这些 TLD 服务器可能知道，你去问他们吧； 本地 DNS 服务器则向其中一台 TLD 服务器发送查询报文； 该 TLD 服务器注意到 b.com 前缀，便向本地 DNS 服务器返回权威 DNS 服务器的 IP 地址。 ​ 意思就是，我不知道 a.b.com 的 IP，不过这些权威服务器可能知道，你去问他们吧； 本地 DNS 服务器又向其中一台权威服务器发送查询报文； 终于，该权威服务器返回了 a.b.com 的 IP 地址； 本地 DNS 服务器将 a.b.com 跟 IP 地址的映射返回给主机 m.n.com，m.n.com 就可以用该 IP 向 a.b.com 发送请求啦。 主机 m.n.com 向本地 DNS 服务器 dns.n.com 发出的查询就是递归查询，这个查询是主机 m.n.com 以自己的名义向本地 DNS 服务器请求想要的 IP 映射，并且本地 DNS 服务器直接返回映射结果给到主机。 而后继的三个查询是迭代查询，包括本地 DNS 服务器向根 DNS 服务器发送查询请求、本地 DNS 服务器向 TLD 服务器发送查询请求、本地 DNS 服务器向权威 DNS 服务器发送查询请求，所有的请求都是由本地 DNS 服务器发出，所有的响应都是直接返回给本地 DNS 服务器。 那么问题来了，所有的 DNS 查询都必须遵循这种递归 + 迭代的模式吗？ 当然不是。 从理论上讲，任何 DNS 查询既可以是递归的，也可以是迭代的。下图的所有查询就都是递归的，不包含迭代。 那么，TLD 一定知道权威 DNS 服务器的 IP 地址吗？ 还真不一定，有时 TLD 只是知道中间的某个 DNS 服务器，再由这个中间 DNS 服务器去找到权威 DNS 服务器。这种时候，整个查询过程就需要更多的 DNS 报文。 DNS缓存为了让我们更快的拿到想要的 IP，DNS 广泛使用了缓存技术。DNS 缓存的原理非常简单，在一个 DNS 查询的过程中，当某一台 DNS 服务器接收到一个 DNS 应答（例如，包含某主机名到 IP 地址的映射）时，它就能够将映射缓存到本地，下次查询就可以直接用缓存里的内容。当然，缓存并不是永久的，每一条映射记录都有一个对应的生存时间，一旦过了生存时间，这条记录就应该从缓存移出。 事实上，有了缓存，大多数 DNS 查询都绕过了根 DNS 服务器，需要向根 DNS 服务器发起查询的请求很少。 参考："},{"title":"网页在线工具汇总","date":"2022-01-21T09:15:00.000Z","url":"/2022/01/21/%E7%BD%91%E9%A1%B5%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/","tags":[["工具","/tags/%E5%B7%A5%E5%85%B7/"]],"categories":[["工具","/categories/%E5%B7%A5%E5%85%B7/"]],"content":"常用在线工具 文件传输 在线听歌 看电影 今日热榜 上班摸鱼 免费图床 找电影 note.ms 匿名分享 文本配音 PDF 压缩 高清壁纸 链接提取 ocr 识别 pp 直连 加密解密 快速搜索 视频压缩 在线笔记 缩短网址 短视频解析 写简历 图片压缩 做 Logo 智能法律咨询 生活急救指南 快速定位资源：大佬点入、dalao.ru 工具合集 影视在线大全 音乐在线大全 短信接码网站 匿名分享服务 网盘加速方法 资源搜索引擎 图片无损放大 国内在线分享服务 图片压缩网站 在线抠图大全 免费文件存储 临时邮箱大全 免费图床大全 二维码生成 短地址汇总 ip 查询大全 蛙蛙在线工具箱 67 工具箱 云极客工具 独特工具箱 实用在线工具展开目录 在线格式转换 白描 ocr 加密格式音乐解锁 视频 AI 转换文本 网址汉字移除 表格转换工具 在线 pdf 工具箱 音乐剪辑 跑马灯 视频转 gif 直播源转换 图片转换器 在线图标制作 图片编辑 支付宝到账语音 冷熊简历 域名查询 m3u8 下载 相似词查询 种子磁立互转 "},{"title":"iOS 如何让编译器跳过不支持模拟器的.a文件","date":"2022-01-18T06:27:55.000Z","url":"/2022/01/18/iOS-%E5%A6%82%E4%BD%95%E8%AE%A9%E7%BC%96%E8%AF%91%E5%99%A8%E8%B7%B3%E8%BF%87%E4%B8%8D%E6%94%AF%E6%8C%81%E6%A8%A1%E6%8B%9F%E5%99%A8%E7%9A%84-a%E6%96%87%E4%BB%B6/","tags":[["iOS","/tags/iOS/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":" 我们在开发中经常会接入第三方的静态库.a 文件，有的静态库文件支持的架构比较多 x86、arm64、arm7s、arm7这样我们编译的时候不会出错。但是支持的架构越多最后生成的ipa包就越大，比如x86的架构，生产环境根本用不到，许多第三方给出的.a文件就不会包含这个架构。这样就只能真机运行测试了。那我们想用模拟器测试怎么办呢？下面给出两种解决办法。 规避法 补全法 新建一个同名的工程 把第三方库的头文件都拷贝进去 把所有借口都使用假函数实现一遍，然后编译出模拟器版本 把第三方的静态库lib1.a和我们编译出来的lib2.a合并lipo -create lib1.a lib2.a -output libXATA.a "},{"title":"react native ios 滚动条位置异常","date":"2022-01-13T02:14:38.000Z","url":"/2022/01/13/react-native-ios-%E6%BB%9A%E5%8A%A8%E6%9D%A1%E4%BD%8D%E7%BD%AE%E5%BC%82%E5%B8%B8/","tags":[["react-native","/tags/react-native/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":" React native ScrollView FlatList 滚动条位置异常、错位 解决方法 ScrollView 增加属性 在根目录 index.js 中添加 参考 "},{"title":"图床工具PicGo","date":"2022-01-05T07:26:09.000Z","url":"/2022/01/05/%E5%9B%BE%E5%BA%8A%E5%B7%A5%E5%85%B7PicGo/","tags":[["工具","/tags/%E5%B7%A5%E5%85%B7/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":" 使用 Picgo+Github 搭建个人图床，为本地图片添加外部链接。 1. 创建 GitHub 仓库 注意事项：仓库类型要选择 public，否则访问不到图片 2.获取 token 创建完成后进入，选择右上角的 Settings 选择 Developer settings 3.选择 Personal access tokens，然后点击 Generate new token 填写一下 Note，过期时间选择无期限，并勾选 repo 即可，拉到页面最下方确认提交 创建完成后，即可看到 token。这个值一定要保存下来，因为只显示一次。 3. PicGo 设置1.下载 Picgo，选择你所需的版本 配置 GitHub 图床 仓库名、分支、token 配置好后，就能上传图片了。 4.搭配 CDN 使用 使用 GitHub 仓库作为图床，存在的问题是国内访问 github 的速度很慢，可以利用 jsDelivr CDN 来加速访问。jsDelivr 是一个免费开源的 CDN 解决方案，该平台是首个打通中国大陆与海外的免费 CDN 服务，拥有中国政府颁发的 ICP 许可证，无须担心中国防火墙问题而影响使用。使用 jsDelivr 加速访问，需要将自定义域名设置为用户名/图床仓库名/。 加上 cdn 后图片访问速度飞快。 测试：  5.Typora 配置图床Typora 是最好用的 Markdown 编辑器，还可以搭配图床一起使用，非常 nice ～ PicGO 设置 Server Typora 设置 右键上传就行了。 "},{"title":"React Native 搭配 MobX 使用心得","date":"2021-09-09T02:56:39.000Z","url":"/2021/09/09/React-Native-%E6%90%AD%E9%85%8D-MobX-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/","tags":[["react-native","/tags/react-native/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":"React Native 使用 MobXMobX 是一个用于状态管理的Javascript库，它通过运用透明的函数式响应编程（Transparent Functional Reactive Programming，TFRP）使状态管理变得简单和可扩展，与React Native一起使用效果很好。 安装 Mobx 和 Mobx-reactMobx 是主要的库，而 mobx-react 具有用于 react 的 mobx 绑定。使用以下命令安装 Mobx 和 Mobx-react： 启用 Mobx 装饰器语法你也可以在没有装饰器语法的情况下使用 Mobx，但是使用装饰器可以简化代码，所以让我们启用它。 使用以下命令为装饰器安装 babel 插件： 并在 .babelrc文件中启用（注意，插件的顺序很重要）： 如何使用React上下文设置 Mobx让我们看看如何使用 react 和 react 上下文来设置 Mobx。 什么是react上下文？Context 提供了一种通过组件树传递数据的方法，而无需在每个级别手动向下传递 props。简单来说，React 上下文用于将一些数据存储在一个地方并在整个应用程序中使用它。每次修改上下文中的数据时，组件也会重新渲染。如果我们不使用上下文，那么我们将使用 props 手动传递数据。 从技术上讲，Mobx 和其他状态管理库也做同样的事情，但功能更多 设置一个基本的 Mobx store转到react native程序中的 src 文件夹，创建一个名为的文件夹services并创建一个名为的文件store.js 转到新创建的store.js文件并粘贴以下代码 store说明它是一个非常简单的存储，带有一个用于存储用户数据的用户对象、一个标题字符串、一些修改用户和标题的函数。@observable用于告诉 mobx 在修改 observable 属性时重新渲染组件。 @action是一个用于修改 observable 的函数。运行一个@actions也会触发autoRun如果您设置了其中任何一个，函数。 useStore 是我们的自定义钩子，用于在任何功能组件中使用 mobx 存储 withStore 是一个自定义 HOC（高阶组件），可以在任何类组件中使用 mobx 存储。 Mobx 使用转到App.js Home.js 功能组件使用 useStore 钩子"},{"title":"Android打包混淆出现java.lang.OutOfMemoryError: Java heap space","date":"2021-09-08T02:56:42.000Z","url":"/2021/09/08/Android%E6%89%93%E5%8C%85%E6%B7%B7%E6%B7%86%E5%87%BA%E7%8E%B0java-lang-OutOfMemoryError-Java-heap-space/","tags":[["Android","/tags/Android/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":"配置 gradle.properties "},{"title":"系统签名app运行webview闪退问题","date":"2021-09-08T02:40:14.000Z","url":"/2021/09/08/%E7%B3%BB%E7%BB%9F%E7%AD%BE%E5%90%8Dapp%E8%BF%90%E8%A1%8Cwebview%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98/","tags":[["Android","/tags/Android/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":" 开发定制Android系统应用时，系统签名后app闪退 java.lang.UnsupportedOperationException: For security reasons, WebView is not allowed in privileged processes "},{"title":"iOS 启动图尺寸适配","date":"2021-09-08T02:02:08.000Z","url":"/2021/09/08/iOS-%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%B0%BA%E5%AF%B8%E9%80%82%E9%85%8D/","tags":[["Android","/tags/Android/"],["iOS","/tags/iOS/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":" 在 iOS 开发早期，启动图适配，可以通过自定义 LaunchImage 通过设置多张图片来实现通过尺寸的适配，2020 年 4 月开始，所有使用 iOS 13 SDK 的 App 都必须提供 LaunchScreen 如果使用 LaunchScreen 一张图来适配所有尺寸的 iPhone 是一定不够的，不同程度的拉伸是不可避免的，解决办法 👇 方法一 LaunchScreen 中写自定义布局，把 LaunchScreen 当做一个页面，里面不仅仅可以放图片，也来用来放其他 view,这样，重新布局，来实现我们想要的启动页就很容易实现了，这种也是官方推荐的方法 方法二 仍然使用类似于 LaunchImage 的方法来实现，通过配置多张图片的方式，来达到多图适配的问题 在 Assets.xcasset 中新建一个 Image Set，并配置 拷贝如下 xml 内容到 Contents.json 中,并配置尺寸的图片到指定位置，设置只支持 iPhone 图片 3.设置好后，把图片加入到 LaunchImage 中，设置好约束，并把 contentMode 设置为Scale to Fill 删除 app 重新运行就能看到效果了。 记录一下 Android 启动图尺寸 "},{"title":"android 多个图表闪退","date":"2021-09-07T10:56:54.000Z","url":"/2021/09/07/android-%E5%A4%9A%E4%B8%AA%E5%9B%BE%E8%A1%A8%E9%97%AA%E9%80%80/","tags":[["react-native","/tags/react-native/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":""},{"title":"Mac sourcetree自动添加ssh key","date":"2021-09-07T10:23:12.000Z","url":"/2021/09/07/Mac-sourcetree%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0ssh-key/","tags":[["SourceTree","/tags/SourceTree/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":" config "},{"title":"react-native修改第三方包","date":"2021-09-07T10:18:07.583Z","url":"/2021/09/07/react-native%E4%BF%AE%E6%94%B9%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/","tags":[["react-native","/tags/react-native/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":"使用第三方包的时候，经常需要修改内部源码来解决 bug 和实现效果，然而每次 yarn、npm install 之后，修改的代码又会被覆盖，让人抓狂，下面介绍一个好用的方法 👇 使用工具：patch-package 用法修改 package.json,添加 &quot;postinstall&quot;: &quot;patch-package&quot; 执行 yarn add patch-package postinstall-postinstall -D 修改第三方库后， 应用补丁 "},{"title":"yarn的常用命令","date":"2021-09-07T09:27:54.000Z","url":"/2021/09/07/yarn%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","tags":[["yarn","/tags/yarn/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":"yarn 安装npm i yarn -g 查看版本yarn -v 新建 package.jsonyarn init 添加依赖通过 yarn add 添加依赖会更新 package.json 以及 yarn.lock 文件 1.开发环境 2.生产环境 3.全局 更新 移除 安装 运行脚本 显示包信息 列出所有依赖 管理 yarn 配置文件 缓存"},{"title":"iOS 开发解决dyld: Library not loaded: @rpath/xxx.framework/ ","date":"2021-09-07T09:06:20.000Z","url":"/2021/09/07/iOS-%E5%BC%80%E5%8F%91%E8%A7%A3%E5%86%B3dyld-Library-not-loaded-rpath-xxx-framework/","tags":[["iOS","/tags/iOS/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":"最近使用百度人脸采集 sdk 时运行报错 解决办法 "},{"title":"react-native-webview禁止缩放和自适应高度","date":"2021-09-07T08:04:33.000Z","url":"/2021/09/07/react-native-webview%E7%A6%81%E6%AD%A2%E7%BC%A9%E6%94%BE%E5%92%8C%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6/","tags":[["react-native","/tags/react-native/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"]],"content":""},{"title":"搜索","date":"2021-09-06T09:40:56.000Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"tags","date":"2021-09-06T09:46:26.000Z","url":"/tags/index.html","categories":[[" ",""]]},{"title":"friends","date":"2021-09-06T09:59:41.000Z","url":"/friends/index.html","categories":[[" ",""]]}]